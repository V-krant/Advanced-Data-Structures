//Implement the three member functions of linked_list class: bubble-sort, selection-sort, and insertion-sort.

#include <iostream>
using namespace std;

class node {
public:
	int value;
	node * next;
	node() { next = nullptr; }
	node(int k) { value = k; next = nullptr; }
};

class linked_list {
public:
	int num_nodes;
	node * head;
	linked_list() { num_nodes = 0; head = nullptr; }
	void make_random_list(int k);//create a linked list of 
								 //k nodes with values in 0 ..99 randomly
	void print(); //Print values of all nodes from head node

	void reverse(); //Reverse the order of nodes of linked list	
	//void remove_all(int k); //Remove all nodes whose node values are k
	//void insert(int k); //create a new node with value k and insert it to an already sorted list. After the insert, the linked list is still sorted.


//*********************

	void bubble_sort(); //Bubble-Sort the nodes, based on ascending order of node values
	void selection_sort(); //Selection-Sort the nodes, based on ascending order of node values
	void insertion_sort(); Insert-Sort the nodes, based on ascending order of node values
	

};


void linked_list::make_random_list(int k) {
	node * p;
	for (int i = 0; i < k; i++) {
		p = new node(rand() % 100);
		p->next = head;
		head = p;
		num_nodes++;
	}
}

void linked_list::print() {
	node * p = head;
	cout << endl;
	while (p != nullptr) {
		cout << p->value << " ";
		p = p->next;
	}
}

void linked_list::reverse() {
	if (num_nodes <= 1) return;
	node * p1 = head, *p2 = head->next, *p3;
	while (p2 != nullptr) {
		p3 = p2->next;
		p2->next = p1;
		if (p1 == head) p1->next = nullptr;
		p1 = p2;
		p2 = p3;
	}
	head = p1;
}
int main() {
	
	linked_list L1;
	L1.make_random_list(50);
	L1.print();
	L1.bubble_sort();
	L1.print();

	linked_list L2;
	L2.make_random_list(50);
	L2.print();
	L2.selection_sort();
	L2.print();
	
	linked_list L3;
	L3.make_random_list(50);
	L3.print();
	L3.insertion_sort();
	L3.print();

	getchar();
	getchar();
	return 0;
}
