//Merge Sort on Linked List

#include <iostream>
#include <list>
#include <vector>

using namespace std;

class node {
public:
	int value;
	node * next;
	node() { next = nullptr; }
	node(int i) { value = i; next = nullptr; }
};


class linked_list {
public:
	int num_nodes;
	node * head;
	linked_list() { num_nodes = 0; head = nullptr; }
	void make_list(int k, int m);
	void print();
	//****************************************************************************************************************************************
	void merge_sort(node * p, int i); //Sort the portion (i nodes) of linked list beginning at the node pointed by p.
									  
	void merge(node * p1, int i1, node * p2, int i2);
	//*******************************************************************************************************************************************

};


void linked_list::make_list(int k, int m) {
	for (int i = 0; i < k; i++) {
		node * p = new node(rand() % m);
		p->next = head;
		head = p;
		num_nodes++;
	}
}


void linked_list::print() {
	node * p = head;
	cout << endl;
	while (p != nullptr) {
		cout << p->value << " ";
		p = p->next;
	}
}

void linked_list::merge_sort(node * p, int i) {
	if (i == 1 || i==0)
		return;
	if(i==2){
		node * temp = p->next;
		if (p->value > temp->value) {
			int v = temp->value;
			temp->value = p->value;
			p->value = v;
		}
			return;
	}
	node * p2 = p;
	for (size_t n = 0; n < i/2; n++)
	{
		p2 = p2->next;
	}
	merge_sort(p, i / 2);
	merge_sort(p2, (i - i / 2));
	merge(p, i / 2, p2, (i - i / 2));
	return;
}

void linked_list::merge(node * p1, int i1, node * p2, int i2) {
	node * l1 = p1;
	node * l2 = p2;
	node * temp=nullptr;
	int t1 = 0, t2 = 0;
	for (int i = 0; i < i1; i++) {
		if (i2 == 0)
			break;
		else {
			if (l1->value > l2->value) {
				t2 = l2->value;
				l2 = l2->next;
				i1++;
				i2--;
				temp = l1;
				for (int j = i; j < i1; j++)
				{
					t1 = temp->value;
					temp->value = t2;
					t2 = t1;
					temp = temp->next;
				}
				l1 = l1->next;
			}
			else
				l1 = l1->next;
		}
	}
	return;
}

void make_random_vector(vector<int> &V, int k, int m) {
	for (int i = 0; i < k; i++) V.push_back(rand() % m);
}

//***********************************************************************************************************************
void merge_sort(vector<int> &V); //Using iterative (i.e., non_recursive) approach to implement merge sort.
//***********************************************************************************************************************

void merge_sort(vector<int> &V) {
	int x = 1;
	while (x <= V.size()) {
		x = x * 2;
		for (int n = 0; n < V.size(); n = n + x) {
			int t1 = 0, t2 = 0;
			int s1 = x / 2,s2=x/2;
			int k = n + s1;
			for (int i = n; i < n + s1; i++) {
				if (i == V.size())
					break;
				if (s2 == 0)
					break;
				else {
					if (k >= V.size())
						break;
					if (V[i] > V[k]) {
						t2 = V[k];
						k++;
						s1++;
						s2--;
						for (int j = i; j < k; j++)
						{
							t1 = V[j];
							V[j] = t2;
							t2 = t1;
						}
					}
				}
			}
		}
	}
		return;	
}

int main() {

	vector<int> V;
	make_random_vector(V, 50, 40);
	cout << endl;
	for (size_t i = 0; i < V.size(); i++) cout << V[i] << " ";
	merge_sort(V);
	cout << endl;
	for (size_t i = 0; i < V.size(); i++) cout << V[i] << " ";

	linked_list L1;
	L1.make_list(30, 20);
	L1.print();
	L1.merge_sort(L1.head, L1.num_nodes);
	L1.print();

	getchar();
	getchar();
	return 0;
}



