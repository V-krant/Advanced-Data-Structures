//2_3_4 Tree

#include <iostream>
#include <vector>
using namespace std;

class node {
public:
	int num_values;
	vector<int> value;  //it can contain 1 ... 3 values
	node * parent;
	vector<node *> child;  //child[i] ( i = 0 ... 3) is a pointer to child node i
	int child_state; //a node can have up to 4 child nodes: child 0, 1, 2, 3.  child_state i (0 ... 3) means this node is child i of its parent
	int is_leaf; //1 if this is a leaf node; otherwise 0
	node() { num_values = 0; is_leaf = 1; child.assign(4, nullptr); parent = nullptr; value.assign(3, -999); }
	void add_value(int k);  //add value to a node of less than 3 value
	void remove_value(int k); //remove value from a node of more than 1 value
};

void node::add_value(int k) {
	if (num_values == 0) {
		value[0] = k;
		child_state = -1;
	}
	else if (num_values == 1) {
		if (value[0] > k) {
			value[1] = value[0];
			value[0] = k;
		}
		else {
			value[1] = k;
		}
	}
	else {
		if (value[0] > k) {
			value[2] = value[1];
			value[1] = value[0];
			value[0] = k;
		}
		else if (value[1] > k) {
			value[2] = value[1];
			value[1] = k;
		}
		else {
			value[2] = k;
		}
	}
	num_values++;
}

void node::remove_value(int k) {
	if (value[0] == k) {
		value[0] = value[1];
		value[1] = value[2];
		value[2] = -999;
	}
	else if (value[1] == k) {
		value[1] = value[2];
		value[2] = -999;
	}
	else
		value[2] = -999;
	num_values--;

 }

class two34_tree {
public:
	node * root;
	two34_tree() { root = nullptr; }
	void add(int k);
	node * find(int k); //find a node to add value k; invoked by add
	void break_3_value_node(node * p); //to be invoked by find
	void remove(int k);
	node * find_1(int k); //find a node to replace k once k is removed; invokde by remove
	void expand_1_value_node(node *p); //to be invoked by find_1
	void fusion(node *p); //to be invoked by exapnd_1_value_node
	void rotation(node *p); ////to be invoked by exapnd_1_value_node
	void pre_order_traversal(node * p);
	void in_order_traversal(node * p);
};

void two34_tree::add(int k) {
	if (root == nullptr) {
		root = new node();
		root->add_value(k);
	}
	else {
		node * rn = find(k);
		rn->add_value(k);
	}	
}

node * two34_tree ::find(int k) {
	node * rn = root;
	while (rn != nullptr) {
		if (rn->num_values == 3 && rn->is_leaf==1) {
			break_3_value_node(rn);
			rn = root;
		}
		else {
			if (rn->num_values == 1) {
				if (rn->value[0] > k) {
					if (rn->is_leaf == 1)
						return rn;
					else
						rn = rn->child[0];
				}
				else {
					if (rn->is_leaf == 1)
						return rn;
					else
						rn = rn->child[1];
				}
			}
			else if (rn->num_values == 2) {
				if (rn->value[0] > k) {
					if (rn->is_leaf == 1)
						return rn;
					else
						rn = rn->child[0];
				}
				else if (rn->value[1] > k) {
					if (rn->is_leaf == 1)
						return rn;
					else
						rn = rn->child[1];
				}
				else {
					if (rn->is_leaf == 1)
						return rn;
					else
						rn = rn->child[2];
				}
			}
			else {
				if (rn->value[0] > k) {
					if (rn->is_leaf == 1)
						return rn;
					else
						rn = rn->child[0];
				}
				else if (rn->value[1] > k) {
					if (rn->is_leaf == 1)
						return rn;
					else
						rn = rn->child[1];
				}
				else if (rn->value[2] > k) {
					if (rn->is_leaf == 1)
						return rn;
					else
						rn = rn->child[2];
				}
				else {
					if (rn->is_leaf == 1)
						return rn;
					else
						rn = rn->child[3];		
				}
			}
		}
	}
}

void two34_tree::break_3_value_node(node * p) {
	if (p == root) {
		node * rchild = new node();
		node * lchild=new node();
		if (p->is_leaf == 0) {
			lchild->child[0] = p->child[0];
			lchild->child[0]->child_state = 0;
			lchild->child[0]->parent = lchild;
			lchild->child[1] = p->child[1];
			lchild->child[1]->child_state = 1;
			lchild->child[1]->parent = lchild;
			rchild->child[0] = p->child[2];
			rchild->child[0]->child_state = 0;
			rchild->child[0]->parent = rchild;
			rchild->child[1] = p->child[3];
			rchild->child[1]->child_state = 1;
			rchild->child[1]->parent = rchild;
			p->child[2] = nullptr;
			p->child[3] = nullptr;
			lchild->is_leaf = 0;
			rchild->is_leaf = 0;
		}
		lchild->value[0] = p->value[0];
		lchild->child_state = 0;
		p->child[0] = lchild;
		lchild->num_values = 1;
		lchild->parent = p;
		rchild->value[0] = p->value[2];
		rchild->child_state = 1;
		p->child[1] = rchild;
		rchild->num_values = 1;
		rchild->parent = p;
		p->num_values = 1;
		p->value[0] = p->value[1];
		p->value[1] = -999;
		p->value[2] = -999;
		p->is_leaf = 0;

	}
	else {
		if (p->parent->num_values == 3)
			break_3_value_node(p->parent);
		node * par = p->parent;
		node * lchild = new node();
		lchild->value[0] = p->value[0];
		lchild->num_values = 1;
		lchild->parent = par;

		switch (p->child_state) {
		case 0: {
			par->value[2] = par->value[1];
			par->value[1] = par->value[0];
			par->value[0] = p->value[1];
			p->value[0] = p->value[2];
			p->value[1] = -999;
			p->value[2] = -999;
			if (par->child[2] != nullptr) {
				par->child[3] = par->child[2];
				par->child[3]->child_state = 3;
			}
			par->child[2] = par->child[1];
			par->child[2]->child_state = 2;
			par->child[0] = lchild;
			lchild->child_state = 0;
			par->child[1] = p;
			p->child_state = 1;
			p->num_values = 1;
			par->num_values++;
			if (p->is_leaf == 0) {
				lchild->child[0] = p->child[0];
				lchild->child[0]->child_state = 0;
				lchild->child[0]->parent = lchild;
				lchild->child[1] = p->child[1];
				lchild->child[1]->child_state = 1;
				lchild->child[1]->parent = lchild;
				p->child[0] = p->child[2];
				p->child[0]->child_state = 0;
				p->child[1] = p->child[3];
				p->child[1]->child_state = 1;
				p->child[2] = nullptr;
				p->child[3] = nullptr;
				lchild->is_leaf = 0;
			}
			break;
		}
		case 1: {
			par->value[2] = par->value[1];
			par->value[1] = p->value[1];
			p->value[0] = p->value[2];
			p->value[1] = -999;
			p->value[2] = -999;
			if (par->child[2] != nullptr) {
				par->child[3] = par->child[2];
				par->child[3]->child_state = 3;
			}
			par->child[1] = lchild;
			lchild->child_state = 1;
			par->child[2] = p;
			p->child_state = 2;
			p->num_values = 1;
			par->num_values++;
			if (p->is_leaf == 0) {
				lchild->child[0] = p->child[0];
				lchild->child[0]->child_state = 0;
				lchild->child[0]->parent = lchild;
				lchild->child[1] = p->child[1];
				lchild->child[1]->child_state = 1;
				lchild->child[1]->parent = lchild;
				p->child[0] = p->child[2];
				p->child[0]->child_state = 0;
				p->child[1] = p->child[3];
				p->child[1]->child_state = 1;
				p->child[2] = nullptr;
				p->child[3] = nullptr;
				lchild->is_leaf = 0;
			}
			break;
		}
		case 2: {
			par->value[2] = p->value[1];
			p->value[0] = p->value[2];
			p->value[1] = -999;
			p->value[2] = -999;
			par->child[2] = lchild;
			lchild->child_state = 2;
			par->child[3] = p;
			p->child_state = 3;
			p->num_values = 1;
			par->num_values++;
			if (p->is_leaf == 0) {
				lchild->child[0] = p->child[0];
				lchild->child[0]->child_state = 0;
				lchild->child[0]->parent = lchild;
				lchild->child[1] = p->child[1];
				lchild->child[1]->child_state = 1;
				lchild->child[1]->parent = lchild;
				p->child[0] = p->child[2];
				p->child[0]->child_state = 0;
				p->child[1] = p->child[3];
				p->child[1]->child_state = 1;
				p->child[2] = nullptr;
				p->child[3] = nullptr;
				lchild->is_leaf = 0;
			}
			break;
		}
		}
	}
}

void two34_tree::remove(int k) {
	node * fn = root, *rn = nullptr;
	while (fn != nullptr) {
		if (fn->value[0] == k || fn->value[1] == k || fn->value[2] == k) {
			rn = fn;
			break;
		}
		if (fn->num_values == 1) {
			if (fn->value[0] > k)
				fn = fn->child[0];
			else {
				fn = fn->child[1];
			}
		}
		else if (fn->num_values == 2) {
			if (fn->value[0] > k)
				fn = fn->child[0];
			else if (fn->value[1] > k)
				fn = fn->child[1];
			else
				fn = fn->child[2];
		}
		else {
			if (fn->value[0] > k)
				fn = fn->child[0];
			else if (fn->value[1] > k)
				fn = fn->child[1];
			else if (fn->value[2] > k)
				fn = fn->child[2];
			else
				fn = fn->child[3];
		}
	}
	if (rn == nullptr)
		return;
	//if (rn->is_leaf == 0) {
	node * replacer = find_1(k);
	fn = root;
	rn = nullptr;
	while (fn != nullptr) {
		if (fn->value[0] == k || fn->value[1] == k || fn->value[2] == k) {
			rn = fn;
			break;
		}
		if (fn->num_values == 1) {
			if (fn->value[0] > k)
				fn = fn->child[0];
			else {
				fn = fn->child[1];
			}
		}
		else if (fn->num_values == 2) {
			if (fn->value[0] > k)
				fn = fn->child[0];
			else if (fn->value[1] > k)
				fn = fn->child[1];
			else
				fn = fn->child[2];
		}
		else {
			if (fn->value[0] > k)
				fn = fn->child[0];
			else if (fn->value[1] > k)
				fn = fn->child[1];
			else if (fn->value[2] > k)
				fn = fn->child[2];
			else
				fn = fn->child[3];
		}
	}
	rn->remove_value(k);
	if (rn->num_values == 0)
		root = nullptr;
	if (replacer != nullptr) {
		if (replacer->num_values == 2) {
			rn->add_value(replacer->value[1]);
			replacer->remove_value(replacer->value[1]);
		}
		else {
			rn->add_value(replacer->value[2]);
			replacer->remove_value(replacer->value[2]);
		}
	}
}

node * two34_tree::find_1(int k) {
	node * fn = root, *rn = nullptr;
	while (fn != nullptr) {
		if (fn->value[0] == k || fn->value[1] == k || fn->value[2] == k) {
			rn = fn;
			break;
		}
		if (fn->num_values == 1 && fn != root)
			expand_1_value_node(fn);
		else if (fn->num_values == 1) {
			if (fn->value[0] > k)
				fn = fn->child[0];
			else {
				fn = fn->child[1];
			}
		}
		else if (fn->num_values == 2) {
			if (fn->value[0] > k)
				fn = fn->child[0];
			else if (fn->value[1] > k)
				fn = fn->child[1];
			else
				fn = fn->child[2];
		}
		else {
			if (fn->value[0] > k)
				fn = fn->child[0];
			else if (fn->value[1] > k)
				fn = fn->child[1];
			else if (fn->value[2] > k)
				fn = fn->child[2];
			else
				fn = fn->child[3];
		}
	}
	if (rn->is_leaf == 1 && rn != root) {
		if (rn->num_values == 1)
			expand_1_value_node(rn);
		return nullptr;
	}
	if(rn->is_leaf==1)
		return nullptr;
	if (rn->num_values == 1 && rn != root)
		expand_1_value_node(rn);
	if (rn->value[0] == k)
		rn = rn->child[0];
	else if (rn->value[1] == k)
		rn = rn->child[1];
	else
		rn = rn->child[2];
	while (rn->is_leaf == 0) {
		if (rn->num_values == 1) {
			rn = rn->child[1];
			expand_1_value_node(rn->parent);
		}
		else if (rn->num_values == 2)
			rn = rn->child[2];
		else
			rn = rn->child[3];
	}
	if (rn->num_values == 1)
		expand_1_value_node(rn);
	return rn;
}

void two34_tree::expand_1_value_node(node *p){
	node * par = p->parent;
	switch (p->child_state)
	{
	case 0: {
		if (par->child[1]->num_values > 1)
			rotation(p);
		else
			fusion(p);
		break;
	}
	case 1: {
		if (par->child[0]->num_values > 1 || par->child[2]->num_values > 1)
			rotation(p);
		else
			fusion(p);
		break;
	}
	case 2: {
		if (par->num_values == 3) {
			if (par->child[1]->num_values > 1 || par->child[3]->num_values > 1)
				rotation(p);
			else
				fusion(p);
		}
		else {
			if (par->child[1]->num_values > 1)
				rotation(p);
			else
				fusion(p);
		}
		break;
	}
	case 3: {
		if (par->child[2]->num_values > 1)
			rotation(p);
		else
			fusion(p);
	}
	default:
		break;
	}
}

void two34_tree::fusion(node *p) {
	node * par = p->parent, *chd = nullptr;
	if (p->child_state == 0) {
		p->value[1] = par->value[0];
		p->value[2] = par->child[1]->value[0];
		par->remove_value(par->value[0]);
		if (p->is_leaf == 0) {
			p->child[2] = par->child[1]->child[0];
			p->child[2]->child_state = 2;
			p->child[3] = par->child[1]->child[1];
			p->child[3]->child_state = 3;
		}
		if (par->num_values == 2) {
			par->child[1] = par->child[2];
			par->child[1]->child_state = 1;
			par->child[2] = par->child[3];
			par->child[2]->child_state = 2;
			par->child[3] = nullptr;
		}
		else if (par->num_values == 1) {
			par->child[1] = par->child[2];
			par->child[1]->child_state = 1;
			par->child[2] = nullptr;
		}
		else {
			root = p;
			p->child_state = -1;
			p->parent = nullptr;
		}
	}
	else if (p->child_state == 1) {
		p->value[2] = p->value[0];
		p->value[1] = par->value[0];
		p->value[0] = par->child[0]->value[0];
		par->remove_value(par->value[0]);
		if (p->is_leaf == 0) {
			p->child[3] = p->child[1];
			p->child[3]->child_state = 3;
			p->child[2] = p->child[0];
			p->child[2]->child_state = 2;
			p->child[0] = par->child[0]->child[0];
			p->child[1] = par->child[0]->child[1];
		}
		par->child[0] = p;
		p->child_state = 0;
		par->child[1] = par->child[2];
		par->child[1]->child_state = 1;
		if (par->num_values == 3) {
			par->child[2] = par->child[3];
			par->child[2]->child_state = 2;
			par->child[3] = nullptr;
		}
		else if (par->num_values == 2)
			par->child[2] = nullptr;
		else {
			root = p;
			p->child_state = -1;
			p->parent = nullptr;
		}
	}
	else if (p->child_state == 2) {
		p->value[2] = p->value[0];
		p->value[1] = par->value[1];
		p->value[0] = par->child[1]->value[0];
		par->remove_value(par->value[1]);
		if (p->is_leaf == 0) {
			p->child[3] = p->child[1];
			p->child[3]->child_state = 3;
			p->child[2] = p->child[0];
			p->child[2]->child_state = 2;
			p->child[0] = par->child[1]->child[0];
			p->child[1] = par->child[1]->child[1];
		}
		par->child[1] = p;
		p->child_state = 1;
		if (par->num_values == 3) {
			par->child[2] = par->child[3];
			par->child[2]->child_state = 2;
			par->child[3] = nullptr;
		}
		else
			par->child[2] = nullptr;
	}
	else {
		p->value[2] = p->value[0];
		p->value[1] = par->value[2];
		p->value[0] = par->child[2]->value[0];
		par->remove_value(par->value[2]);
		if (p->is_leaf == 0) {
			p->child[3] = p->child[1];
			p->child[3]->child_state = 3;
			p->child[2] = p->child[0];
			p->child[2]->child_state = 2;
			p->child[0] = par->child[2]->child[0];
			p->child[1] = par->child[2]->child[1];
		}
		par->child[2] = p;
		p->child_state = 2;
		par->child[3] = nullptr;
	}
	p->num_values = 3;
}

void two34_tree::rotation(node *p) {
	node* par = p->parent,*chd=nullptr;
	if (p->child_state == 0) {
		chd = par->child[1];
		p->value[1] = par->value[0];
		par->value[0] = chd->value[0];
		p->num_values = 2;
		chd->num_values--;
		chd->value[0] = chd->value[1];
		chd->value[1] = chd->value[2];
		chd->value[2] = -999;
	}
	else if (p->child_state == 1) {
		if (par->child[0]->num_values > 1) {
			chd = par->child[0];
			p->value[1] = p->value[0];
			p->value[0] = par->value[0];
			if (chd->num_values == 3) {
				par->value[0] = chd->value[2];
				chd->value[2] = -999;
			}
			else {
				par->value[0] = chd->value[1];
				chd->value[1] = -999;
			}
			p->num_values = 2;
			chd->num_values--;
		}
		else {
			chd = par->child[2];
			p->value[1] = par->value[1];
			par->value[1] = chd->value[0];
			p->num_values = 2;
			chd->num_values--;
			chd->value[0] = chd->value[1];
			chd->value[1] = chd->value[2];
			chd->value[2] = -999;
		}
	}
	else if(p->child_state==2){
		if (par->child[1]->num_values > 1) {
			chd = par->child[1];
			p->value[1] = p->value[0];
			p->value[0] = par->value[1];
			if (chd->num_values == 3) {
				par->value[1] = chd->value[2];
				chd->value[2] = -999;
			}
			else {
				par->value[1] = chd->value[1];
				chd->value[1] = -999;
			}
			p->num_values = 2;
			chd->num_values--;
		}
		else {
			chd = par->child[3];
			p->value[1] = par->value[2];
			par->value[2] = chd->value[0];
			p->num_values = 2;
			chd->num_values--;
			chd->value[0] = chd->value[1];
			chd->value[1] = chd->value[2];
			chd->value[2] = -999;
		}
	}
	else {
		chd = par->child[2];
		p->value[1] = p->value[0];
		p->value[0] = par->value[2];
		if (chd->num_values == 3) {
			par->value[2] = chd->value[2];
			chd->value[2] = -999;
		}
		else {
			par->value[2] = chd->value[1];
			chd->value[1] = -999;
		}
		p->num_values = 2;
		chd->num_values--;
	}
}

void two34_tree::pre_order_traversal(node * p) {
	if (p == nullptr)  return;
	cout <<"child state = "<<p->child_state<< " value1 = " << p->value[0] << " " << "value2 = " << p->value[1]<<" " << "value3 = " << p->value[2] <<" "<<"No. of values = "<< p->num_values<<endl;
	pre_order_traversal(p->child[0]);
	pre_order_traversal(p->child[1]);
	pre_order_traversal(p->child[2]);
	pre_order_traversal(p->child[3]);
}

void two34_tree::in_order_traversal(node * p) {
	cout << endl;
	node * p1 = p;
	if (p1 == nullptr) return;
	int i;
	for (i = 0; i < p1->num_values; i++) {
		in_order_traversal(p1->child[i]);
		cout << "  " << p1->value[i] << "  " << "child_state = " << p1->child_state;
	}
	in_order_traversal(p1->child[i]);
	
}


int main() {

	two34_tree t1;
	t1.add(40);
	t1.add(30);
	t1.add(20);
	t1.in_order_traversal(t1.root);
	t1.add(100);
	t1.add(120);
	t1.in_order_traversal(t1.root);
	t1.add(200);
	t1.in_order_traversal(t1.root);
	t1.add(400);
	t1.in_order_traversal(t1.root);
	t1.add(600);
	t1.in_order_traversal(t1.root);
	t1.remove(20);
	t1.in_order_traversal(t1.root);
	t1.remove(200);
	t1.in_order_traversal(t1.root);
	t1.remove(100);
	t1.in_order_traversal(t1.root);
	getchar();
	getchar();
	return 0;
}
